/*
buildscript {
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.0.0.BUILD-SNAPSHOT"
    }
}

plugins {
    id "java"
    id "idea"
    id "eclipse"
    id "cn.bestwu.propdeps" version "0.0.10"
    id "cn.bestwu.propdeps-idea" version "0.0.10"
    id "cn.bestwu.propdeps-maven" version "0.0.10"
    id "cn.bestwu.propdeps-eclipse" version "0.0.10"
    id "io.spring.dependency-management" version "1.0.2.RELEASE"
}

apply plugin: "org.springframework.boot"

bootJar {
    launchScript {
        included = true
    }
    mainClass = "daggerok.SseApplication"
}

build.dependsOn bootJar

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:2.0.0.BUILD-SNAPSHOT"
    }
}

version = "0.0.1"
sourceCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-webflux",
            "org.springframework.boot:spring-boot-starter-aop",
            "org.springframework.boot:spring-boot-starter-data-mongodb",
            "org.mongodb:mongodb-driver-reactivestreams",
            "org.springframework.boot:spring-boot-starter-web",
            "org.webjars:webjars-locator",
            "org.webjars:jquery:3.2.0",
            "org.webjars:materializecss:0.98.1",
            "org.webjars:react:15+",
            "org.webjars:babel:5.8.29-1",
            "org.webjars.npm:types__whatwg-fetch:0.0.33", // fetch api
            "org.webjars.bower:event-source-polyfill:0.0.4" // sse api
    optional "org.springframework.boot:spring-boot-configuration-processor"
    compileOnly "org.projectlombok:lombok"
    runtime "org.springframework.boot:spring-boot-devtools",
            "org.springframework.boot:spring-boot-starter-tomcat"
    testCompile "org.springframework.boot:spring-boot-starter-test"
}
*/
/*
plugins {
    id "java"
    id "idea"
    id "eclipse"
    id "io.spring.dependency-management" version "1.0.2.RELEASE"
    id "org.springframework.boot" version "2.0.0.BUILD-SNAPSHOT" apply false
}

apply plugin: "org.springframework.boot"

springBoot {
    executable = true
}
*/

buildscript {
    ext {
        springBootVersion = "2.0.0.BUILD-SNAPSHOT"
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
    }
}

plugins {
    id "java"
    id "idea"
    id "eclipse"
    id "io.spring.dependency-management" version "1.0.2.RELEASE"
}

apply plugin: "org.springframework.boot"

bootJar {
    launchScript {
        included = true
    }
}

version = "0.0.1"
sourceCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}


dependencies {
    compile "org.springframework.boot:spring-boot-starter-data-redis-reactive",
            "org.springframework.boot:spring-boot-starter-webflux",
            "io.vavr:vavr:0.9.0"
    runtime "org.springframework.boot:spring-boot-devtools"
    compileOnly "org.projectlombok:lombok"
    testCompile "org.springframework.boot:spring-boot-starter-test"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:$springBootVersion"
    }
}

def dockerCompose = "docker-compose --project-name=reactive"

task composeUp(type: Exec) {
    executable "bash"
    args "-c", """
                    $dockerCompose down -v \
                    && $dockerCompose up -d --build \
                    && echo "waiting for redis bootstrap..." \
                    && sleep 5
               """
}

task composeDown(type: Exec) {
    executable "bash"
    args "-c", "$dockerCompose down -v"
}

test.dependsOn composeUp
test.finalizedBy composeDown
